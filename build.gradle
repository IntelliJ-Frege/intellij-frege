import org.jetbrains.grammarkit.tasks.*
import org.gradle.plugins.ide.idea.model.*

import java.util.stream.Collectors

plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.5.0'
    id 'org.jetbrains.intellij' version '0.7.2'
    id 'org.jetbrains.grammarkit' version '2021.1'
    id 'idea'
}


apply plugin: 'org.jetbrains.intellij'
apply plugin: 'org.jetbrains.grammarkit'

group 'com.plugin.frege'
version '1.0-SNAPSHOT'

ext {
    javaTarget = JavaVersion.current().toString()
    fregeRelease = "3.24alpha"
    fregeVersion = "3.24.100"
    fregeDir = "${rootProject.projectDir}/lib/org/frege-lang/frege/${fregeVersion}"
    fregeJar = "${fregeDir}/frege-${fregeVersion}.jar"
    fregeCompilerUrl = "https://github.com/Frege/frege/releases/download/${fregeRelease}/frege${fregeVersion}.jar"
    fregeMainSourceDir = "${projectDir}/src/main/frege"
    fregeMainJavaDir = "${buildDir}/src/main/frege"
}

idea {
    module {
        sourceDirs += file(fregeMainSourceDir)
    }
//    project {
//        projectLibraries << new ProjectLibrary(name: "class-file-dependencies", classes: [sourceSets.main.java.outputDir])
//    }
}

//println idea.project.projectLibraries.iterator().next().getClasses()

repositories {
    mavenCentral()

    // Frege lib
    flatDir {
        dirs fregeDir
    }

    flatDir {
        dirs 'libs'
    }
}


void downloadFregeCompiler() {
    ant.mkdir(dir: fregeDir)
    ant.get(src: fregeCompilerUrl,
            dest: fregeJar,
            skipexisting: 'true')
}

// Those lines add Frege standard library dependency
// And as standard library is not updated in Gradle repositories, we need to download compiler before
configurations.implementation.withDependencies { deps ->
    downloadFregeCompiler()
    deps.add(project.dependencies.create("org.frege-lang:frege:${fregeVersion}"))
//    deps.add(project.dependencies.create("fuck:this:2.2.8"))
}

dependencies {
    implementation 'org.jetbrains.kotlin:kotlin-reflect:1.5.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
    implementation project(":fregeJavaDependencies")
    implementation files("libsa/frege-1.0-SNAPSHOT.jar")
}

intellij {
    version '2021.1'
    plugins = ['java', 'gradle', 'gradle-java']
    downloadSources true
}

task generateFregeLexer(type: GenerateLexer) {
    source = 'src/main/java/com/plugin/frege/lexer/FregeLexer.flex'
    targetDir = 'src/gen/com/plugin/frege/lexer/'
    targetClass = 'FregeLexer'
    purgeOldFiles = true
}

task generateFregeParser(type: GenerateParser) {
    source = 'src/main/java/com/plugin/frege/Frege.bnf'
    targetRoot = 'src/gen'
    pathToParser = '/com/plugin/frege/parser/FregeParser.java'
    pathToPsiRoot = '/com/plugin/frege/psi'
    purgeOldFiles = true
}

// Frege building tasks

task fregeInit {
    group "frege"
    ant.mkdir(dir: fregeMainSourceDir)
}

task prepareCompileDirs { // prepare all the directories that the frege tasks rely upon
    group "frege"
    outputs.dir(sourceSets.main.java.outputDir).withPropertyName("compileOutputDir")
    outputs.dir(sourceSets.test.java.outputDir).withPropertyName("testOutputDir")
    doLast {
        ant.mkdir(dir: sourceSets.main.java.outputDir)
        ant.mkdir(dir: sourceSets.test.java.outputDir)
    }
}

task fregeCompile(type: JavaExec) {      	// https://docs.gradle.org/6.5/dsl/org.gradle.api.tasks.JavaExec.html
//    doFirst {
//        println "THIS IS SOURCE SET" + sourceSets.main.compileClasspath.asPath
//    }
    dependsOn     ":fregeJavaDependencies:build"
    dependsOn     prepareCompileDirs
    group       = "frege"
    description = "Compile the -Pfrege_file=."
    classpath   = files fregeJar
    args([
            "-d", sourceSets.main.java.outputDir,
            "-fp", fregeJar,
            "-enc", "UTF-8",
            "-target", javaTarget,
            "-hints",
            "-make",
            "-sp", sourceSets.main.java.srcDirs.join(':'),
            "-ascii",
            "-latin",
            "-v",
            project.hasProperty("frege_file") ? project.frege_file : fregeMainSourceDir
    ])
//    println "outputDir: " + sourceSets.main.java.outputDir
//    println "classpath: " + sourceSets.main.compileClasspath.asPath
//    println "joined srcDirs: " + sourceSets.main.java.srcDirs.join(':')
//    println "mainSource: " + fregeMainSourceDir
    println commandLine.stream().collect(Collectors.joining(" "))
}

fregeCompile.doLast {
    ant.move(toDir: fregeMainJavaDir) {
        fileSet(dir: sourceSets.main.java.outputDir) {
            include name:"**/*.java"
        }
    }
}

//tasks.register('fregeJar', Jar) {
//    archiveClassifier = 'uber'
//    dependsOn fregeCompile
//
//    from sourceSets.main.output
//
//    dependsOn configurations.runtimeClasspath
//    from {
//        configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
//    }
//}


task fregeJarPlugin(type: Jar) {
    dependsOn fregeCompile
    archiveBaseName.set("frege")

    from sourceSets.main.java.outputDir // TODO
    doFirst {
        sourceSets.main.compileClasspath = files(sourceSets.main.compileClasspath + file("libs/frege-1.0-SNAPSHOT.jar"))
        sourceSets.main.runtimeClasspath = files(sourceSets.main.runtimeClasspath + file("libs/frege-1.0-SNAPSHOT.jar"))
    }
}

compileJava {
    dependsOn fregeJarPlugin
//    dependsOn generateFregeParser
//    dependsOn generateFregeLexer
}

patchPluginXml {
    changeNotes """
      Add change notes here.<br>
      <em>most HTML tags may be used</em>"""
}

sourceSets.main.java.srcDirs 'src/gen'